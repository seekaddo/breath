# ============================================================================
#                      Copyright 2008-2010 Gennaro Prota
#
#                   Licensed under the 3-Clause BSD License.
#              (See accompanying file 3_CLAUSE_BSD_LICENSE.txt or
#               <https://opensource.org/licenses/BSD-3-Clause>.)
# ____________________________________________________________________________


#       dump_here_document():
#       =====================
#
#       Writes to standard output one or more here-documents contained
#       in the running script ($0). The first argument to the function
#       ($1) is the delimiter string.
#
#       Limitations:
#
#       Currently, the function recognizes a subset of the POSIX format
#
#         [n]<<[-]word
#             here-document
#         delimiter
#
#       In particular:
#
#        - only the "<<" redirection operator is recognized ("<<-" is
#          not). Accordingly, leading <tab>s are not stripped.
#
#        - n, if present, is ignored
#
#        - no characters in 'word' must be quoted (thus 'delimiter' must
#          be 'word' itself)
#
#       Furthermore:
#
#        - unsurprisingly, the function doesn't tokenize its input, so
#          it may get confused, for instance, if a line which is part of
#          a comment ends in
#
#             <<word
#
#          In the future we might change $start to [^#]*<<$1$ (no '#'
#          character before "<<"), though that breaks
#
#            cat << "#" <<word
#            ...
#
#          ) or to :[ \t]*<<word (redirection to colon), which reflects
#          our most frequent usage.
#
#        - likewise, there's no parsing, so---for instance---nesting
#          doesn't work: given
#
#            : <<eof1; : <<eof2
#            Hello,
#            eof1
#            World!
#            eof2
#
#          dump_here_document 'eof2' will output *all* the three
#          intermediate lines:
#
#            Hello,
#            eof1
#            World!
#
#        - considering also the limitation in the previous bullet we
#          decided that 'word' must appear at the end of the line in
#
#            <<word
#
#          too.
#
#          (Thus, with regards to the example therein,
#          dump_here_document 'eof1' won't output anything. The intent
#          is to intercept similar uses early, rather than "waiting" for
#          the user to actually call us with argument 'eof2')
#
#        - the here-document is output verbatim: there is no parameter
#          expansion, no command substitution, and no arithmetic
#          expansion.
# ----------------------------------------------------------------------------
dump_here_document()
{
    (
        start="<<$1$"
        end="^$1$"

        sed -n -e "/$start/,/$end/p"     < "$0" |
        sed    -e "/$start/d"                   |
        sed    -e "/$end/d"
    )
}

# Local Variables:
# mode: shell-script
# indent-tabs-mode: nil
# sh-indentation: 4
# End:
# vim: set ft=sh et sts=4 sw=4:
